""" Callbacks handlers """

import os
import asyncio

from aiogram import Router, F, Bot
from aiogram.types import CallbackQuery, Message
from aiogram.filters import StateFilter
from aiogram.fsm.context import FSMContext

from utils.FSM_states import FsmStates
from gpt.requests_gpt import gpt
from data.dbconnect import mongoBase
from markups.markups import keyboard

photo_analyse = Router()


@photo_analyse.callback_query(F.data == "button_photo_analyse_pressed")
async def photo_analyse_callback(call: CallbackQuery, state: FSMContext) -> None:
    """

    :param call:
    :param state:
    :return:
    """

    subscription = await mongoBase.check_photo_attempts(tg_id=call.message.chat.id)
    profile = await mongoBase.send_profile(tg_id=call.message.chat.id)


    if subscription == None or subscription <= 0:
        await call.answer(text='–£ –≤–∞—Å –Ω–µ—Ç –ø–æ–ø—ã—Ç–æ–∫.\n\n–ö—É–ø–∏—Ç–µ –ø–æ–ø—ã—Ç–∫–∏ –≤ —Ä–∞–∑–¥–µ–ª–µ "–û–ø–ª–∞—Ç–∞".',
                          show_alert=True)
    elif profile["gender"] == "–ù–µ —É–∫–∞–∑–∞–Ω" or profile["age"] == "–ù–µ —É–∫–∞–∑–∞–Ω" or profile["weight"] == "–ù–µ —É–∫–∞–∑–∞–Ω" or profile["height"] == "–ù–µ —É–∫–∞–∑–∞–Ω" or profile["target"] == "–ù–µ —É–∫–∞–∑–∞–Ω":
        await call.answer(text='–£ –≤–∞—Å –Ω–µ —É–∫–∞–∑–∞–Ω—ã —Ñ–∏–∑–∏–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã.\n\n–ü–µ—Ä–µ–π–¥–∏—Ç–µ –≤ –ø—Ä–æ—Ñ–∏–ª—å –∏ —É–∫–∞–∂–∏—Ç–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã',
                          show_alert=True)
    else:
        await call.message.delete()

        await call.message.answer("–û—Ç–ø—Ä–∞–≤—å –º–Ω–µ —Ñ–æ—Ç–æ, –∏ —è –ø–æ—Å–º–æ—Ç—Ä—é, —á—Ç–æ —É —Ç–µ–±—è –Ω–∞ —Ç–∞—Ä–µ–ª–∫–µ!\n–ú–æ–∂–µ—à—å –ø—Ä–æ—Å—Ç–æ –æ–ø–∏—Å–∞—Ç—å —Ç–µ–∫—Å—Ç–æ–º, –∏ —è –ø–æ–º–æ–≥—É —Ä–∞—Å—Å—á–∏—Ç–∞—Ç—å –∫–∞–ª–æ—Ä–∏–π–Ω–æ—Å—Ç—å –∏ –º–∞–∫—Ä–æ–Ω—É—Ç—Ä–∏–µ–Ω—Ç—ã. –ï—Å–ª–∏ –Ω–µ –∑–Ω–∞–µ—à—å, —á—Ç–æ —Å—ä–µ—Å—Ç—å, –∑–∞–≥–ª—è–Ω–∏ –≤–æ –≤–∫–ª–∞–¥–∫—É —Å —Ä–µ—Ü–µ–ø—Ç–∞–º–∏ üòâ")

        await state.set_state(FsmStates.send_photo)


@photo_analyse.message(StateFilter(FsmStates.send_photo), F.photo)
async def user_send_photo(message: Message, bot: Bot, state: FSMContext) -> None:
    """

    :param message:
    :param bot:
    :param state:
    :return:
    """

    msg = await bot.send_message(chat_id=message.from_user.id,
                                 text=f"<i>–ó–∞–ø—Ä–æ—Å –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è...</i>",
                                 parse_mode="html")

    photo = message.photo[-1]
    destination = os.path.abspath(f"photo/file{message.from_user.id}.jpg")
    await bot.download(file=photo.file_id, destination=destination)

    await bot.send_chat_action(chat_id=message.from_user.id, action="typing")

    data = dict(await mongoBase.send_profile(tg_id=message.from_user.id))

    manBMR = 88.36 + (13.4 * int(data["weight"])) + (4.8 * int(data["height"])) - (5.7 * int(data["age"]))
    womanBMR = 447.6 + (9.2 * int(data["weight"])) + (3.1 * int(data["height"])) - (4.3 * int(data["age"]))

    if data["gender"] == "–ú—É–∂—á–∏–Ω–∞":
        res = await gpt.analyse_photo(image=destination, gender=data["gender"], age=data["age"], height=data["height"], target=data["target"], calorie=manBMR * 1.5)
    else:
        res = await gpt.analyse_photo(image=destination, gender=data["gender"], age=data["age"], height=data["height"],
                                      target=data["target"], calorie=womanBMR * 1.5)

    await bot.send_chat_action(chat_id=message.from_user.id, action="typing")
    print(res)

    os.remove(destination)

    await mongoBase.update_attempts(message.from_user.id)

    await msg.delete()

    await bot.send_message(chat_id=message.from_user.id,
                           text=f"–†–µ–∑—É–ª—å—Ç–∞—Ç:\n\n{res.message.content}",
                           parse_mode="html")

    await state.clear()

    await asyncio.sleep(5)

    await bot.send_message(chat_id=message.from_user.id,
                           text=f"–Ø –ø–æ–º–æ–≥—É —Ç–µ–±–µ —Å–∫–∏–Ω—É—Ç—å –ø–∞—Ä—É –ª–∏—à–Ω–∏—Ö –∫–∏–ª–æ–≥—Ä–∞–º–º –∏ –ø—Ä–∏–π—Ç–∏ –∫ –≥–∞—Ä–º–æ–Ω–∏—á–Ω—ã–º –æ—Ç–Ω–æ—à–µ–Ω–∏—è–º —Å –µ–¥–æ–π –±–µ–∑ –æ—Ç–∫–∞–∑–∞ –æ—Ç –ª—é–±–∏–º—ã—Ö –ø—Ä–æ–¥—É–∫—Ç–æ–≤ –∏ –Ω–µ —Ç—Ä–∞—Ç—è –º–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏ –Ω–∞ –≥–æ—Ç–æ–≤–∫—É. –Ø –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É—é —Ç–≤–æ–π —Ä–∞—Ü–∏–æ–Ω, –¥–∞–º —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—é –Ω–∞ —É—Ä–æ–≤–Ω–µ —Ç–æ–ø–æ–≤–æ–≥–æ –Ω—É—Ç—Ä–∏—Ü–∏–æ–ª–æ–≥–∞ –∏ –ø–æ–º–æ–≥—É —Å –±—ã—Å—Ç—Ä—ã–º–∏, –≤–∫—É—Å–Ω—ã–º–∏ –∏ —Å–±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–º–∏ —Ä–µ—Ü–µ–ø—Ç–∞–º–∏.",
                           parse_mode="html",
                           reply_markup=keyboard)


@photo_analyse.message(StateFilter(FsmStates.send_photo))
async def not_age(message: Message, bot: Bot, state: FSMContext):
    """

    :param message:
    :param bot:
    :param state:
    :return:
    """
    await state.clear()

    await bot.send_message(chat_id=message.from_user.id,
                           text="–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏.\n\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")

    await asyncio.sleep(0.7)

    await bot.send_message(chat_id=message.from_user.id,
                           text=f"–ò —Å–Ω–æ–≤–∞, –∑–¥—Ä–∞–≤—Å—Ç–≤—É–π ‚úã\n\n–Ø –ø–æ–º–æ–≥—É —Ç–µ–±–µ —Å–∫–∏–Ω—É—Ç—å –ø–∞—Ä—É –ª–∏—à–Ω–∏—Ö –∫–∏–ª–æ–≥—Ä–∞–º–º –∏ –ø—Ä–∏–π—Ç–∏ –∫ –≥–∞—Ä–º–æ–Ω–∏—á–Ω—ã–º –æ—Ç–Ω–æ—à–µ–Ω–∏—è–º —Å –µ–¥–æ–π –±–µ–∑ –æ—Ç–∫–∞–∑–∞ –æ—Ç –ª—é–±–∏–º—ã—Ö –ø—Ä–æ–¥—É–∫—Ç–æ–≤ –∏ –Ω–µ —Ç—Ä–∞—Ç—è –º–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏ –Ω–∞ –≥–æ—Ç–æ–≤–∫—É. –Ø –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É—é —Ç–≤–æ–π —Ä–∞—Ü–∏–æ–Ω, –¥–∞–º —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—é –Ω–∞ —É—Ä–æ–≤–Ω–µ —Ç–æ–ø–æ–≤–æ–≥–æ –Ω—É—Ç—Ä–∏—Ü–∏–æ–ª–æ–≥–∞ –∏ –ø–æ–º–æ–≥—É —Å –±—ã—Å—Ç—Ä—ã–º–∏, –≤–∫—É—Å–Ω—ã–º–∏ –∏ —Å–±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–º–∏ —Ä–µ—Ü–µ–ø—Ç–∞–º–∏.",
                           parse_mode="html",
                           reply_markup=keyboard)
