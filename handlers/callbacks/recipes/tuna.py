from aiogram import Router, F
from aiogram.types import CallbackQuery, InlineKeyboardButton, InlineKeyboardMarkup, LinkPreviewOptions

router = Router()


@router.callback_query(F.data == 'tuna5')
@router.callback_query(F.data == 'tuna4')
@router.callback_query(F.data == 'tuna3')
@router.callback_query(F.data == 'tuna2')
@router.callback_query(F.data == 'tuna1')
@router.callback_query(F.data == 'tuna_inline5')
@router.callback_query(F.data == 'tuna_inline4')
@router.callback_query(F.data == 'tuna_inline3')
@router.callback_query(F.data == 'tuna_inline2')
@router.callback_query(F.data == 'tuna_inline1')
async def tunas(call: CallbackQuery):
    """ """
    if call.data == 'tuna1' or call.data == 'tuna_inline1':

        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text='–†–µ—Ü–µ–ø—Ç', callback_data='recipe_tuna1')],
            [
                InlineKeyboardButton(text='‚¨ÖÔ∏è', callback_data='tuna2'),
                InlineKeyboardButton(text='‚û°Ô∏è', callback_data='tuna3')
            ],
            [InlineKeyboardButton(text='–ù–∞–∑–∞–¥', callback_data='button_recipe_analyse_pressed')]
        ])
        if call.data == 'tuna_inline1':
            await call.message.answer(text="<b> –ü–û–ö–ï —Å —Ä–∏—Å–æ–º, —Ç—É–Ω—Ü–æ–º –∏ –∫—Ä–µ–≤–µ—Ç–∫–∞–º–∏ (–ö–ë–ñ–£: 449/20/14/56) </b>",
                                      parse_mode='html',
                                    link_preview_options=LinkPreviewOptions(
                                    url='https://youtube.com/shorts/bF4_J4Y4oBY?si=mrQmEhjVxVF9hpak',
                                    prefer_large_media=True),
                                    reply_markup=keyboard
                                    )
        else:
            await call.message.edit_text(text="<b> –ü–û–ö–ï —Å —Ä–∏—Å–æ–º, —Ç—É–Ω—Ü–æ–º –∏ –∫—Ä–µ–≤–µ—Ç–∫–∞–º–∏ (–ö–ë–ñ–£: 449/20/14/56)</b>",
                                      parse_mode='html',
                                      link_preview_options=LinkPreviewOptions(
                                          url='https://youtube.com/shorts/bF4_J4Y4oBY?si=mrQmEhjVxVF9hpak',
                                          prefer_large_media=True),
                                      reply_markup=keyboard
                                      )

    if call.data == 'tuna2' or call.data == 'tuna_inline2':

        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text='–†–µ—Ü–µ–ø—Ç', callback_data='recipe_tuna2')],
            [
                InlineKeyboardButton(text='‚¨ÖÔ∏è', callback_data='tuna4'),
                InlineKeyboardButton(text='‚û°Ô∏è', callback_data='tuna1')
            ],
            [InlineKeyboardButton(text='–ù–∞–∑–∞–¥', callback_data='button_recipe_analyse_pressed')]
        ])
        if call.data == 'tuna_inline2':
            await call.message.answer(text="<b> –ü–∞—Å—Ç–∞ —Å –∞–≤–æ–∫–∞–¥–æ –∏ —Ç—É–Ω—Ü–æ–º (–ö–ë–ñ–£: 374/26/12/39)</b>",
                                      parse_mode='html',
                                    link_preview_options=LinkPreviewOptions(
                                    url='https://youtube.com/shorts/ldHdIHY-Yl8?si=zC8VuNA7hIw4Z3Nl',
                                    prefer_large_media=True),
                                    reply_markup=keyboard
                                    )
        else:
            await call.message.edit_text(text="<b> –ü–∞—Å—Ç–∞ —Å –∞–≤–æ–∫–∞–¥–æ –∏ —Ç—É–Ω—Ü–æ–º (–ö–ë–ñ–£: 374/26/12/39) </b>",
                                      parse_mode='html',
                                      link_preview_options=LinkPreviewOptions(
                                          url='https://youtube.com/shorts/ldHdIHY-Yl8?si=zC8VuNA7hIw4Z3Nl',
                                          prefer_large_media=True),
                                      reply_markup=keyboard
                                      )

    if call.data == 'tuna3' or call.data == 'tuna_inline3':

        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text='–†–µ—Ü–µ–ø—Ç', callback_data='recipe_tuna3')],
            [
                InlineKeyboardButton(text='‚¨ÖÔ∏è', callback_data='tuna1'),
                InlineKeyboardButton(text='‚û°Ô∏è', callback_data='tuna5')
            ],
            [InlineKeyboardButton(text='–ù–∞–∑–∞–¥', callback_data='button_recipe_analyse_pressed')]
        ])
        if call.data == 'tuna_inline3':
            await call.message.answer(text="<b> –ù–∞–º–∞–∑–∫–∞ –∏–∑ —Ç—É–Ω—Ü–∞ –∏ –∞–≤–æ–∫–∞–¥–æ (–ö–ë–ñ–£: 420/28/21/28) </b>",
                                      parse_mode='html',
                                    link_preview_options=LinkPreviewOptions(
                                    url='https://youtube.com/shorts/Eg5A4xBfNC8?si=CZyiEait7XKwNZkr',
                                    prefer_large_media=True),
                                    reply_markup=keyboard
                                    )
        else:
            await call.message.edit_text(text="<b> –ù–∞–º–∞–∑–∫–∞ –∏–∑ —Ç—É–Ω—Ü–∞ –∏ –∞–≤–æ–∫–∞–¥–æ (–ö–ë–ñ–£: 420/28/21/28)</b>",
                                      parse_mode='html',
                                      link_preview_options=LinkPreviewOptions(
                                          url='https://youtube.com/shorts/Eg5A4xBfNC8?si=CZyiEait7XKwNZkr',
                                          prefer_large_media=True),
                                      reply_markup=keyboard
                                      )

    if call.data == 'tuna4' or call.data == 'tuna_inline4':

        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text='–†–µ—Ü–µ–ø—Ç', callback_data='recipe_tuna4')],
            [
                InlineKeyboardButton(text='‚¨ÖÔ∏è', callback_data='tuna5'),
                InlineKeyboardButton(text='‚û°Ô∏è', callback_data='tuna2')
            ],
            [InlineKeyboardButton(text='–ù–∞–∑–∞–¥', callback_data='button_recipe_analyse_pressed')]
        ])
        if call.data == 'tuna_inline4':
            await call.message.answer(text="<b> –í–∞—Ñ–ª–∏ —Å —Ç—É–Ω—Ü–æ–º –∏ —Å—ã—Ä–æ–º (–ö–ë–ñ–£: 454/42/11/43) </b>",
                                      parse_mode='html',
                                    link_preview_options=LinkPreviewOptions(
                                    url='https://youtube.com/shorts/-uiVNJkPZj0?si=5a1v_bemW4-drtzk',
                                    prefer_large_media=True),
                                    reply_markup=keyboard
                                    )
        else:
            await call.message.edit_text(text="<b> –í–∞—Ñ–ª–∏ —Å —Ç—É–Ω—Ü–æ–º –∏ —Å—ã—Ä–æ–º (–ö–ë–ñ–£: 454/42/11/43)</b>",
                                      parse_mode='html',
                                      link_preview_options=LinkPreviewOptions(
                                          url='https://youtube.com/shorts/-uiVNJkPZj0?si=5a1v_bemW4-drtzk',
                                          prefer_large_media=True),
                                      reply_markup=keyboard
                                      )

    if call.data == 'tuna5' or call.data == 'tuna_inline5':

        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text='–†–µ—Ü–µ–ø—Ç', callback_data='recipe_tuna5')],
            [
                InlineKeyboardButton(text='‚¨ÖÔ∏è', callback_data='tuna3'),
                InlineKeyboardButton(text='‚û°Ô∏è', callback_data='tuna4')
            ],
            [InlineKeyboardButton(text='–ù–∞–∑–∞–¥', callback_data='button_recipe_analyse_pressed')]
        ])
        if call.data == 'tuna_inline5':
            await call.message.answer(text="<b> –†–æ–ª–ª —Å —Ç—É–Ω—Ü–æ–º (–ö–ë–ñ–£: 345/25/10/38) </b>",
                                      parse_mode='html',
                                    link_preview_options=LinkPreviewOptions(
                                    url='https://youtube.com/shorts/0F0kNvjAQYA?si=e9zN9IqssoKnEJWa',
                                    prefer_large_media=True),
                                    reply_markup=keyboard
                                    )
        else:
            await call.message.edit_text(text="<b> –†–æ–ª–ª —Å —Ç—É–Ω—Ü–æ–º (–ö–ë–ñ–£: 345/25/10/38)</b>",
                                      parse_mode='html',
                                      link_preview_options=LinkPreviewOptions(
                                          url='https://youtube.com/shorts/0F0kNvjAQYA?si=e9zN9IqssoKnEJWa',
                                          prefer_large_media=True),
                                      reply_markup=keyboard
                                      )


@router.callback_query(F.data == 'recipe_tuna5')
@router.callback_query(F.data == 'recipe_tuna4')
@router.callback_query(F.data == 'recipe_tuna3')
@router.callback_query(F.data == 'recipe_tuna2')
@router.callback_query(F.data == 'recipe_tuna1')
async def recipe_chicken(call: CallbackQuery) -> None:
    """ """
    if call.data == 'recipe_tuna1':
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text='–ù–∞–∑–∞–¥', callback_data='tuna_inline1')]
        ])
        await call.message.answer(text=""" 
               –ò–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç—ã: 
- —Ä–∏—Å 40 –≥—Ä –≤ —Å—É—Ö–æ–º –≤–∏–¥–µ –∏–ª–∏ 120 –≥—Ä –≤ –≥–æ—Ç–æ–≤–æ–º (–≤ —Ä–∏—Å –¥–æ–±–∞–≤–ª—è—é —á–∞–π–Ω—É—é –ª–æ–∂–∫—É —É–∫—Å—É—Å–∞ –¥–ª—è —Ä–∏—Å–∞)
- –¢—É–Ω–µ—Ü 80 –≥—Ä
- –ö—Ä–µ–≤–µ—Ç–∫–∏/–º–∏–¥–∏–∏ 20 –≥—Ä 
- –ú–∞–Ω–≥–æ 50 –≥—Ä
- –ê–≤–æ–∫–∞–¥–æ 25 –≥—Ä–∞–º–º
- –û–≥—É—Ä–µ—Ü ü•í 
- –ß—É–∫–∫–∞ –≤ –æ—Ä–µ—Ö–æ–≤–æ–º —Å–æ—É—Å–µ 30 –≥—Ä
- –°–æ—É—Å –û—Ä–µ—Ö–æ–≤—ã–π Tamaki - 20 –≥—Ä

""",
                                  protect_content=True)
        await call.message.answer(text="""
                –ü—Ä–∏–≥–æ—Ç–æ–≤–ª–µ–Ω–∏–µ:
1. –ö—Ä–µ–≤–µ—Ç–∫–∏ –æ—Ç–≤–∞—Ä–∏—Ç—å –≤ –∫–∏–ø—è—â–µ–π –ø–æ–¥—Å–æ–ª–µ–Ω–Ω–æ–π –≤–æ–¥–µ 3 –º–∏–Ω—É—Ç—ã. 
2. –†–∏—Å –æ—Ç–≤–∞—Ä–∏—Ç—å –¥–æ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ (—è –±–µ—Ä—É –≤ –ø–∞–∫–µ—Ç–∏–∫–∞—Ö –∏ –≤–∞—Ä—é –≤ –∫–∏–ø—è—â–µ–π –ø–æ–¥—Å–æ–ª–µ–Ω–Ω–æ–π –≤–æ–¥–µ 25 –º–∏–Ω—É—Ç)
3. –ú–∞–Ω–≥–æ, –∞–≤–æ–∫–∞–¥–æ –ø–æ—Ä–µ–∑–∞—Ç—å –∫—É–±–∏–∫–∞–º–∏, –æ–≥—É—Ä–µ—Ü -—Å–æ–ª–æ–º–∫–æ–π.
4. –°–æ–µ–¥–∏–Ω–∏—Ç—å –≤—Å–µ –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç—ã –≤ –≥–ª—É–±–æ–∫–æ–π —Ç–∞—Ä–µ–ª–∫–µ —Å–µ–∫—Ç–æ—Ä–∞–º–∏, –ø–æ–ª–∏—Ç—å —Å–æ—É—Å–∞–º–∏.
5. –°–≤–µ—Ä—Ö—É –ø–æ—Ä–µ–∑–∞—Ç—å —Å—Ç—Ä—É–∂–∫–æ–π –Ω–æ—Ä–∏ –∏–ª–∏ –ø–æ—Å—ã–ø–∞—Ç—å –∫—É–Ω–∂—É—Ç–æ–º


""",
                                  reply_markup=keyboard,
                                  protect_content=True)

    if call.data == 'recipe_tuna2':
            keyboard = InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text='–ù–∞–∑–∞–¥', callback_data='tuna_inline2')]
            ])
            await call.message.answer(text="""
		–ò–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç—ã: 
- –∞–≤–æ–∫–∞–¥–æ —Ö–∞–∞—Å 50 –≥
- —Ç—É–Ω–µ—Ü –∫–æ–Ω—Å–µ—Ä–≤–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –≤ —Å–æ–±—Å—Ç–≤–µ–Ω–Ω–æ–º —Å–æ–∫—É 75 –≥
- —Ç–≤–æ—Ä–æ–∂–Ω—ã–π —Å—ã—Ä 15 –≥
- –ø–∞—Å—Ç–∞ –±–∞—Ä–∏–ª–ª–∞ 50 –≥
- —Å–æ–ª—å, —Å–ø–µ—Ü–∏–∏, —Å–æ–∫ –ª–∏–º–æ–Ω–∞, –æ–≤–æ—â–∏ –ø–æ –≤–∫—É—Å—É ‚ù§Ô∏è

""",
                                      protect_content=True)
            await call.message.answer(text="""
–ü—Ä–∏–≥–æ—Ç–æ–≤–ª–µ–Ω–∏–µ: 

1. –†–∞–∑–º—è—Ç—å –∞–≤–æ–∫–∞–¥–æ —Å —Ç–≤–æ—Ä–æ–∂–Ω—ã–º —Å—ã—Ä–æ–º, 
2. –î–æ–±–∞–≤–∏—Ç—å —Ç—É–Ω–µ—Ü
3. –î–æ–±–∞–≤–∏—Ç—å —Å–ø–µ—Ü–∏–∏ –∏ –≤—Å—ë —Ö–æ—Ä–æ—à–æ –ø–µ—Ä–µ–º–µ—à–∞—Ç—å 
4. –û—Ç–≤–∞—Ä–∏—Ç—å –º–∞–∫–∞—Ä–æ–Ω—ã –∏ –¥–æ–±–∞–≤–∏—Ç—å –∫ —Ç—É–Ω—Ü—É, –ø–µ—Ä–µ–º–µ—à–∞—Ç—å –∏ –Ω–∞—Å–ª–∞–∂–¥–∞—Ç—å—Å—è ‚ù§
–≠—Ç–æ –æ—á–µ–Ω—å –≤–∫—É—Å–Ω–æ, –∞ –≥–ª–∞–≤–Ω–æ–µ –±—ã—Å—Ç—Ä–æ –≥–æ—Ç–æ–≤–∏—Ç—Å—è, –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ!


 """,
                                      reply_markup=keyboard,
                                      protect_content=True)

    if call.data == 'recipe_tuna3':
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text='–ù–∞–∑–∞–¥', callback_data='tuna_inline3')]
        ])
        await call.message.answer(text="""
		–ò–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç—ã: 
- —Å–ø–µ–ª–æ–µ –∞–≤–æ–∫–∞–¥–æ 80 –≥
- —è–π—Ü–æ —Å1
- —Ç—É–Ω–µ—Ü –∫–æ–Ω—Å–µ—Ä–≤–∏—Ä–æ–≤–∞–Ω–Ω—ã–π 70 –≥
- —Ç–≤–æ—Ä–æ–∂–Ω—ã–π —Å—ã—Ä 15 –≥
- —Ö–ª–µ–± —Ç–æ—Å—Ç–æ–≤—ã–π –ì–µ—Ä–∫—É–ª–µ—Å 40 –≥
- —Å–æ–ª—å, –ø–µ—Ä–µ—Ü –ø–æ –≤–∫—É—Å—É
     """,
                                  protect_content=True)
        await call.message.answer(text="""
–ü—Ä–∏–≥–æ—Ç–æ–≤–ª–µ–Ω–∏–µ: 
1. –ê–≤–æ–∫–∞–¥–æ –ø–æ—á–∏—Å—Ç–∏—Ç—å, —Ä–∞–∑–º—è—Ç—å –≤–∏–ª–∫–æ–π 
2. –Ø–π—Ü–æ –æ—Ç–≤–∞—Ä–∏—Ç—å, —Ä–∞–∑–º—è—Ç—å –≤–∏–ª–∫–æ–π –∏ –¥–æ–±–∞–≤–∏—Ç—å –∫ –∞–≤–æ–∫–∞–¥–æ 
3. –î–æ–±–∞–≤–∏—Ç—å —Ç—É–Ω–µ—Ü, —Ä–∞–∑–º—è—Ç—å –≤—Å–µ –≤ –æ–¥–Ω–æ—Ä–æ–¥–Ω—É—é –º–∞—Å—Å—É 
4. –î–æ–±–∞–≤–∏—Ç—å —Å–æ–ª—å, —Å–ø–µ—Ü–∏–∏, –ª–∏–º–æ–Ω–Ω—ã–π —Å–æ–∫ 
5. –•–ª–µ–± –ø–æ–¥–∂–∞—Ä–∏—Ç—å –≤ —Ç–æ—Å—Ç–µ—Ä–µ, –Ω–∞–º–∞–∑–∞—Ç—å —Å–≤–µ—Ä—Ö—É –Ω–∞–º–∞–∑–∫—É.""",
                                  reply_markup=keyboard,
                                  protect_content=True)

    if call.data == 'recipe_tuna4':
            keyboard = InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text='–ù–∞–∑–∞–¥', callback_data='tuna_inline4')]
            ])
            await call.message.answer(text="""
         –ò–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç—ã:
- 1 —è–π—Ü–æ
- 100–≥ –Ω–µ–∂–∏—Ä–Ω–æ–≥–æ –π–æ–≥—É—Ä—Ç–∞
- 80–≥ —Ç—É–Ω—Ü–∞ (–∫–æ–Ω—Å–µ—Ä–≤–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –≤ –≤–æ–¥–µ) 
- 60–≥ –º—É–∫–∏
- 20–≥ —Å—ã—Ä–∞ 
- –£–∫—Ä–æ–ø
- –°–æ–ª—å
""",
                                      protect_content=True)
            await call.message.answer(text="""
		–ü—Ä–∏–≥–æ—Ç–æ–≤–ª–µ–Ω–∏–µ:
1. –°–º–µ—à–∞—Ç—å –π–æ–≥—É—Ä—Ç, —è–π—Ü–æ –∏ –º—É–∫—É. 
2. –î–æ–±–∞–≤–∏—Ç—å —Ç—É–Ω–µ—Ü, —Å—ã—Ä, –∑–µ–ª–µ–Ω—å –∏ —Å–æ–ª—å –ø–æ –≤–∫—É—Å—É. 
3. –í—Å–µ —Ö–æ—Ä–æ—à–µ–Ω—å–∫–æ –ø–µ—Ä–µ–º–µ—à–∞—Ç—å –∏ –≤—ã–ø–µ–∫–∞—Ç—å –¥–æ —Ö—Ä—É—Å—Ç—è—â–µ–π –∫–æ—Ä–æ—á–∫–∏.


 """,
                                      reply_markup=keyboard,
                                      protect_content=True)

    if call.data == 'recipe_tuna5':
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text='–ù–∞–∑–∞–¥', callback_data='tuna_inline5')]
        ])
        await call.message.answer(text="""
  	–ò–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç—ã:
- –¢–æ—Ä—Ç–∏–ª—å—è –±–æ–ª—å—à–∞—è - 65 –≥—Ä.
- –¢—É–Ω–µ—Ü –∫–æ–Ω—Å–µ—Ä–≤–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –≤ —Å–æ–±—Å—Ç–≤–µ–Ω–Ω–æ–º —Å–æ–∫—É - 80 –≥—Ä.
- –°—ã—Ä —Ç–≤–æ—Ä–æ–∂–Ω—ã–π/ —Å–º–µ—Ç–∞–Ω–∞ - 30 –≥
- –ö—Ä–∞—Å–Ω—ã–π –ª—É–∫ 1/2
- –°–æ–ª—å,—á–µ—Ä–Ω—ã–π –ø–µ—Ä–µ—Ü
- –û–≥—É—Ä–µ—Ü
- –ø–æ–º–∏–¥–æ—Ä
- –°–∞–ª–∞—Ç
+ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ –º–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Å–æ—É—Å ZERO —á–µ—Å–Ω–æ—á–Ω—ã–π

    """,
                                  protect_content=True)
        await call.message.answer(text="""
                            –†–µ—Ü–µ–ø—Ç:
1. –¢—É–Ω–µ—Ü —Ä–∞–∑–º—è—Ç—å –≤–∏–ª–∫–æ–π, –¥–æ–±–∞–≤–∏—Ç—å —Ç—É–¥–∞ –ø–æ—Ä–µ–∑–∞–Ω–Ω—ã–π –æ–≥—É—Ä–µ—Ü, –ª—É–∫, —Å–æ–ª—å, –ø–µ—Ä–µ—Ü, —Ç–≤–æ—Ä–æ–∂–Ω—ã–π —Å—ã—Ä –∏–ª–∏ —Å–º–µ—Ç–∞–Ω—É.
2. –ù–∞ —Ç–æ—Ä—Ç–∏–ª—å—é –≤—ã–ª–æ–∂–∏—Ç—å —Å–∞–ª–∞—Ç–Ω—ã–π –ª–∏—Å—Ç, —Ç—É–Ω–µ—Ü, –æ–≥—É—Ä–µ—Ü, –ø–æ–º–∏–¥–æ—Ä 
3. –°–≤–µ—Ä–Ω—É—Ç—å –≤ —Ä–æ–ª–ª –∏ –æ–±–∂–∞—Ä–∏—Ç—å –Ω–∞ –≥—Ä–∏–ª–µ –±–µ–∑ –º–∞—Å–ª–∞.

""",
                                  reply_markup=keyboard,
                                  protect_content=True)
